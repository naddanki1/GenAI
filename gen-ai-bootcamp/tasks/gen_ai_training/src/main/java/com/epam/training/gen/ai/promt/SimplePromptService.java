package com.epam.training.gen.ai.promt;

import com.azure.ai.openai.OpenAIAsyncClient;
import com.azure.ai.openai.models.ChatCompletionsOptions;
import com.azure.ai.openai.models.ImageGenerationData;
import com.azure.ai.openai.models.ImageGenerationOptions;
import com.azure.ai.openai.models.ImageSize;
import com.epam.training.gen.ai.configuration.ModelConfig;
import com.epam.training.gen.ai.strategy.ChatCompletionStrategy;
import com.microsoft.semantickernel.orchestration.PromptExecutionSettings;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Service;

import java.util.List;
import java.util.Map;


/**
 * Service class for generating chat completions using Azure OpenAI.
 * <p>
 * This service interacts with the Azure OpenAI API to generate chat completions
 * based on a static greeting message. It retrieves responses from the AI model
 * and logs them.
 */
@Slf4j
@Service
public class SimplePromptService {

    private final OpenAIAsyncClient aiAsyncClient;
    private final Map<String, String> modelDeployments;
    private final ChatCompletionStrategy chatCompletionStrategy;
    private final ChatHistoryService chatHistoryService;

    public SimplePromptService(OpenAIAsyncClient aiAsyncClient,
                               ModelConfig modelConfig,
                               ChatCompletionStrategy chatCompletionStrategy,
                               ChatHistoryService chatHistoryService) {
        this.aiAsyncClient = aiAsyncClient;
        this.modelDeployments = modelConfig.getModels();
        this.chatCompletionStrategy = chatCompletionStrategy;
        this.chatHistoryService = chatHistoryService;
    }

    /**
     * Generates chat completions for a given prompt.
     * <p>
     * This method sends the provided prompt to the Azure OpenAI service,
     * waits for the response asynchronously, and returns a list of response messages.
     * </p>
     *
     * @param prompt the text input that serves as the prompt for generating the response
     * @param model key
     * @return a list of response messages generated by the OpenAI model
     */
    public List<String> getChatCompletions(String prompt, String model) {
        String deploymentOrModelName = modelDeployments.getOrDefault(model, modelDeployments.get("gpt-4"));

        deploymentOrModelName = "imagegeneration@005";
        if (deploymentOrModelName.equals("dall-e-3")
                || "stability.stable-diffusion-xl".equals(deploymentOrModelName)
    || "imagegeneration@005".equals(deploymentOrModelName)) {
            log.info("Using DALL·E 3 for image generation...");

            var completion = aiAsyncClient
                    .getImageGenerations(deploymentOrModelName,
                            new ImageGenerationOptions(prompt).setSize(ImageSize.SIZE1024X1024))
                    .block();

            if (completion == null || completion.getData().isEmpty()) {
                log.error("DALL·E 3 returned an empty response.");
                return List.of("Error: No image generated.");
            }

            var images = completion.getData().stream().map(ImageGenerationData::getUrl).toList();
            log.info("Generated Image URLs: {}", images);
            return images;
        } else {

            PromptExecutionSettings settings = chatCompletionStrategy.getDefaultSettings();
            chatHistoryService.addUserMessage(prompt);
            var completions = aiAsyncClient
                    .getChatCompletions(
                            deploymentOrModelName,
                            new ChatCompletionsOptions(
                                    chatHistoryService.getChatHistory())
                                    .setMaxTokens(settings.getMaxTokens())
                                    .setTemperature(settings.getTemperature()))

                    .block();
            var messages = completions.getChoices().stream()
                    .map(c -> c.getMessage().getContent())
                    .toList();
            if (!messages.isEmpty()) {
                chatHistoryService.addSystemMessage(messages.get(0));
            }
            log.info(messages.toString());
            return messages;
        }
    }

}
